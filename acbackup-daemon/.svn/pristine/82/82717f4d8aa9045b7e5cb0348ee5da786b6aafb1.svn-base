package sga.sol.ac.acotp.daemon.server;

import java.io.IOException;
import java.net.InetSocketAddress;

import org.apache.mina.core.filterchain.DefaultIoFilterChainBuilder;
import org.apache.mina.filter.codec.ProtocolCodecFilter;
import org.apache.mina.filter.executor.ExecutorFilter;
import org.apache.mina.filter.executor.OrderedThreadPoolExecutor;
import org.apache.mina.filter.logging.LoggingFilter;
import org.apache.mina.transport.socket.nio.NioDatagramAcceptor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.BeanCreationException;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.jdbc.CannotGetJdbcConnectionException;

import sga.sol.ac.acotp.daemon.codec.AcOtpProtocolCodecFactory;
import sga.sol.ac.acotp.daemon.handler.RadiusServerHandler;

public class RadiusServer {
	private int RADIUS_DEFAULT_PORT = 1812;
	private String RADIUS_SHARED_SECRET = "acotp";
	
	private Logger logger = LoggerFactory.getLogger(this.getClass());
	private ApplicationContext applicationContext;
	
	public RadiusServer() {
		try {
			this.applicationContext = new ClassPathXmlApplicationContext("applicationContext.xml");
		}
		catch(BeanCreationException e) {
			//BeanCreationException BeanInstantiationException MyBatisSystemException PersistenceException CannotGetJdbcConnectionException
			Throwable cause = e.getCause();
			Throwable rootCause = e.getRootCause();
			
			//e.printStackTrace();
			logger.debug(e.getMessage(), e);
			if(e.contains(CannotGetJdbcConnectionException.class)) {
				logger.error("Database connection timeout.");
			}
			throw e;
		}
	}
	
	public synchronized void start(){
		NioDatagramAcceptor acceptor = new NioDatagramAcceptor();
		ServerProperty serverProperty = applicationContext.getBean("serverProperty", ServerProperty.class);
		RadiusServerHandler radiusServerHandler = applicationContext.getBean(RadiusServerHandler.class);
		
		String sharedSecret = serverProperty.getSharedSecret();
		String authPort = serverProperty.getAuthPort();
		
		DefaultIoFilterChainBuilder filterChainBuilder = acceptor.getFilterChain();
		//filterChainBuilder.addLast("logging", new LoggingFilter());
		filterChainBuilder.addLast("threadPool", new ExecutorFilter(new OrderedThreadPoolExecutor(10) ) );
		
		filterChainBuilder.addLast("protocol", new ProtocolCodecFilter(
				new AcOtpProtocolCodecFactory( sharedSecret == null ? RADIUS_SHARED_SECRET : sharedSecret )  ) );												   
		
		acceptor.setHandler(radiusServerHandler);
				
		try {
			InetSocketAddress address = new InetSocketAddress( authPort == null ? RADIUS_DEFAULT_PORT : Integer.parseInt(authPort ) );
			acceptor.bind(address);
			logger.info("ACOTP RADIUS SERVER LISTENING.....PORT: {}", address.getPort() );
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}
