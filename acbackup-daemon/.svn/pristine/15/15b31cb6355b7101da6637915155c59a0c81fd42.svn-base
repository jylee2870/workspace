package sga.sol.ac.acotp.daemon.process;

import java.net.InetSocketAddress;
import java.util.Arrays;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.tinyradius.attribute.RadiusAttribute;
import org.tinyradius.packet.RadiusPacket;

@Service
public class PacketProcess {
	private Logger logger = LoggerFactory.getLogger(this.getClass());
	
	private List receivedPackets = new LinkedList();
	
	class ReceivedPacket {
		public int packetIdentifier;
		public long receiveTime;
		public InetSocketAddress address;
		public byte[] authenticator;
	}
	
	public boolean isPacketDuplicate(RadiusPacket packet, InetSocketAddress address) {
		long now = System.currentTimeMillis();
		long intervalStart = now - 30000;
		
		byte[] authenticator = packet.getAuthenticator();
		
		synchronized(receivedPackets) {
			for (Iterator i = receivedPackets.iterator(); i.hasNext();) {
				ReceivedPacket p = (ReceivedPacket)i.next();
				if (p.receiveTime < intervalStart) {
					// packet is older than duplicate interval
					i.remove();
				} else {
					if (p.address.equals(address) && p.packetIdentifier == packet.getPacketIdentifier()) {
						if (authenticator != null && p.authenticator != null) {
							// packet is duplicate if stored authenticator is equal
							// to the packet authenticator
							return Arrays.equals(p.authenticator, authenticator);
						} else {
							// should not happen, packet is duplicate
							return true;
						}
					}
				}
			}
		
			// add packet to receive list
			ReceivedPacket rp = new ReceivedPacket();
			rp.address = address;
			rp.packetIdentifier = packet.getPacketIdentifier();
			rp.receiveTime = now;
			rp.authenticator = authenticator;
			receivedPackets.add(rp);
		}

		return false;
	}
	
	public void copyProxyState(RadiusPacket request, RadiusPacket response) {
		List proxyStateAttrs = request.getAttributes(33);
		for (Iterator i = proxyStateAttrs.iterator(); i.hasNext();) {
			RadiusAttribute proxyStateAttr = (RadiusAttribute)i.next();
			response.addAttribute(proxyStateAttr);
		}		
	}
}
